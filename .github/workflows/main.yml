name: Main Foodgram workflow

on:
  push:
    branches: 
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.0-alpine
        env:
          POSTGRES_USER: food
          POSTGRES_PASSWORD: food_password
          POSTGRES_DB: food
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        volumes:
          - postgres-data:/var/lib/postgresql/data
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install flake8
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 

    - name: Test flake8
      env:
        POSTGRES_USER: food
        POSTGRES_PASSWORD: food_password
        POSTGRES_DB: food
        DB_HOST: localhost
        DB_PORT: 5432
        DJANGO_SETTINGS_MODULE: foodgram_backend.settings
        ALLOWED_HOSTS: 'localhost,127.0.0.1,testserver'
        CSRF_TRUSTED_ORIGINS: 'http://localhost,http://127.0.0.1,http://testserver'
        CORS_ALLOWED_ORIGINS: 'http://localhost,http://127.0.0.1,http://testserver'
        SECRET_KEY: 'dummy-key-for-tests'
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test --noinput

  build-and-push:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to frontend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
      - name: Push to backend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "infra/docker-compose.production.yml"
        target: "foodgram"
    
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd foodgram/infra
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Выполняет миграции, сбор статики, загрузку ингридиентов
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py makemigrations foodgram
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py load_ingredients

    - name: Send Telegram notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: "Foodgram успешно запущен на сервере!"